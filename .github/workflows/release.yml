name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64 (静态链接 musl)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: zsteg-rust
            asset_name: zsteg-rust-linux-x86_64
          
          # Linux ARM64 (静态链接 musl)
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            artifact_name: zsteg-rust
            asset_name: zsteg-rust-linux-aarch64
          
          # macOS x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: zsteg-rust
            asset_name: zsteg-rust-macos-x86_64
          
          # macOS ARM64 (Apple Silicon)
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: zsteg-rust
            asset_name: zsteg-rust-macos-aarch64
          
          # Windows x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: zsteg-rust.exe
            asset_name: zsteg-rust-windows-x86_64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl tools
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools
          
          # 安装 cross 用于 ARM64 交叉编译
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-musl" ]; then
            cargo install cross --git https://github.com/cross-rs/cross || true
          fi

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Build release binary (ARM64 Linux)
        if: matrix.target == 'aarch64-unknown-linux-musl'
        run: |
          cargo install cross --git https://github.com/cross-rs/cross || true
          cross build --release --target ${{ matrix.target }}

      - name: Build release binary (Other platforms)
        if: matrix.target != 'aarch64-unknown-linux-musl'
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Linux x86_64 / macOS)
        if: matrix.os != 'windows-latest' && matrix.target != 'aarch64-unknown-linux-musl'
        run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
      
      # ARM64 Linux 使用 cross 构建，已经自动 strip 了（或者在容器内处理）
      # 不需要额外 strip，因为 .cargo/config.toml 中已配置 strip = true

      - name: Prepare artifact
        shell: bash
        run: |
          mkdir -p artifacts
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} artifacts/${{ matrix.asset_name }}
          else
            cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} artifacts/${{ matrix.asset_name }}
            chmod +x artifacts/${{ matrix.asset_name }}
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: artifacts/${{ matrix.asset_name }}
          if-no-files-found: error

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create checksums
        run: |
          cd artifacts
          for dir in */; do
            cd "$dir"
            for file in *; do
              sha256sum "$file" > "$file.sha256"
            done
            cd ..
          done

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/*/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

